// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Player {
  id            String    @id @default(cuid())
  name          String    // required
  email         String?   // optional
  handicapIndex Float?    // HI only, optional
  createdAt     DateTime  @default(now())

  entries       Entry[]
  
  @@map("players")
}

model Course {
  id          String    @id @default(cuid())
  name        String    // required
  par         Int       // required
  slope       Int       // required
  rating      Float     // required
  createdAt   DateTime  @default(now())

  tournaments Tournament[]
  
  @@map("courses")
}

model Tournament {
  id                    String    @id @default(cuid())
  name                  String    // required
  date                  String    // required
  courseId              String    // FK to Course
  holes                 Int       @default(18)
  netAllowance          Int       @default(100) // adjustable per event
  passcode              String    // simple for now
  potAmount             Int?      // optional
  participantsForSkins  Int?      // optional
  skinsCarry            Boolean   @default(false) // MUST remain false (no carry)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  course                Course    @relation(fields: [courseId], references: [id])
  entries               Entry[]
  groups                Group[]
  
  @@map("tournaments")
}

model Group {
  id           String    @id @default(cuid())
  tournamentId String
  name         String    // required
  teeTime      DateTime? // optional
  createdAt    DateTime  @default(now())

  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  entries      Entry[]
  
  @@map("groups")
}

model Entry {
  id              String    @id @default(cuid())
  tournamentId    String
  playerId        String
  courseHandicap  Int       // CH after rounding + cap
  playingCH       Int       // after netAllowance + rounding
  groupId         String?   // optional
  createdAt       DateTime  @default(now())

  tournament      Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  player          Player     @relation(fields: [playerId], references: [id], onDelete: Cascade)
  group           Group?     @relation(fields: [groupId], references: [id])
  holeScores      HoleScore[]

  @@unique([tournamentId, playerId])
  @@map("entries")
}

model HoleScore {
  id              String   @id @default(cuid())
  entryId         String
  hole            Int
  strokes         Int
  clientUpdatedAt DateTime @default(now()) // device timestamp for LWW
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  entry Entry @relation(fields: [entryId], references: [id])

  // one score per (entry,hole); required for our findUnique() code
  @@unique([entryId, hole])
}